use crate::char::NaiveChar;
use crate::regex::{NaiveAlternatives, NaiveRegex, NaiveRegexPart, NaiveSequence};

grammar;

match {
    // Disable whitespace skipping.
    r"" => { },
} else {
    "|" => PIPE,
} else {
    r"." => CHAR,
}

pub Regex: NaiveRegexPart = {
    () => NaiveRegexPart::Empty,
    Alternatives,
}

Alternatives: NaiveRegexPart = {
    Sequence,
    <mut part:Alternatives> PIPE <s:Sequence> => match part {
        NaiveRegexPart::Alternatives(ref mut alts) => {
            alts.push(s);
            part
        }
        part => NaiveRegexPart::Alternatives(vec![part, s]),
    },
};

Sequence: NaiveRegexPart = {
    CharLiteral,
    <mut part:Sequence> <c:CharLiteral> => match part {
        NaiveRegexPart::Sequence(ref mut items) => {
            items.push(c);
            part
        }
        part => NaiveRegexPart::Sequence(vec![part, c]),
    },
};

CharLiteral: NaiveRegexPart = {
    Char => NaiveRegexPart::Literal(<>),
}

Char: NaiveChar = <c:CHAR> => c.chars().next().unwrap().into();
